섹션 10. 값 타입

임베디드 타입
값 타입 컬렉션

위 2가지가 중요함

=== 1. 기본값 타입 ===

    JPA 의 데이터 타입 분류는 크게 2가지입니다
    엔티티 타입과 값 타입
    엔티티 타입은 식별자가 있기 때문에 데이터가 변해도 지속적으로 추적이 가능하고
    값 타입은 식별자가 없고 int, Integer, String 같이 단순한 값이나 객체이기 때문에 변하면 추적이 불가능합니다

    여기서 값 타입은 크게 3개로 분류되는데
    1. 기본 값 타입
    2. 임베디드 타입
    3. 컬렉션 값 타입
    이렇게 3가지입니다

    먼저 기본 값 타입을 자세히 살펴봅시다
    기본 값 타입은 공유되지 않는 특성을 가집니다
    예를 들어
    int a = 10;
    int b = a;
    에서 a와 b를 콘솔에 찍어보면
    a = 10
    b = 10
    이렇게 나오죠

    근데 여기서
    int a = 10;
    int b = a;
    a = 20;
    이라고 추가한 후 콘솔에 찍어보면
    a = 20;
    b = 10;
    이라고 나옵니다

    값이 공유가 되지 않는다는 게 이런말이구요
    참고로 Integer 나 String 은 참조 값을 저장하기 때문에 다를 것 같지만 불변 객체라서
    값을 바꿀때마다 매번 새로운 객체를 만들어서 참조값을 바꾸는 방식이죠
    결론은 값 타입은 참조를 통해 공유되면 안된다는 것입니다
    다시 말해
    참조가 아닌 값 자체를 복사해서 사용해야하고
    값 타입을 변경 불가능하게 만들어야 한다는 것임

=== 2. 임베디드 타입 ===

    임베디드 타입은 실무에서 많이 사용되는 값 타입입니다
    주로 기본 값 타입을 모아서 만들어지기 때문에 복합 값 타입이라고도 하구요
    예를 들어
    Member 클래스에

    private Long id;
    private String name;
    private String city;
    private String street;
    private String zipcode;

    이렇게 필드가 작성돼있을때
    city, street, zipcode 는 주소라고 한 번 추상화 할 수 있죠?
    그래서 Address 라는 클래스로 만들어주고
    이걸 임베디드 타입으로 만들어주는 겁니다
    참고로 클래스로 만든다니까 엔티티인가 싶을 수 있는데
    엔티티가 아니라 그냥 엔티티의 값을 모아놓은 클래스일 뿐임
    이런식으로 만들어집니다

    @Embeddable
    public class Address {
        private String city;
        private String street;
        private String zipcode;

        public Address() {} // 기본 생성자 필수로 생성하기
    }

    이런식으로 임베디드 타입을 만들어주고
    엔티티 클래스에도 임베디드 타입을 추가해줍시다

    @Entity
    public class Member {
        @Id @GeneratedValue
        private Long id;

        private String name;

        @Embedded
        private Address address;
    }

    참고로 @Embedded 나 @Embeddable 둘 중 하나를 써놨으면 다른 건 안써도 되는데
    협업하는 입장에서는 둘 다 표시해주는 게 좋습니다
    팀원들이 Address 가 임베디드 타입인 걸 알아야하니까요

    이렇게 임베디드 타입을 사용해주면 주소 관련된 메서드 같은건 다 Address 클래스에게 책임을
    분산시킬 수 있으니까 응집도를 높일 수 있습니다 객체지향적인 설계를 할 수 있겠죠
    그리고 Member 엔티티 클래스에 필드가 적어지니까 구조를 파악하기 쉽습니다 협업 할 때 도움이 됨

    그럼 마지막으로 Address 임베디드 타입을 여러 번 사용해야한다면 어떻게 하죠
    예를 들어,
    하나는 집 주소
    home_city, home_street, home_zipcode 로 하고
    나머지 다른 주소는 직장 주소
    work_city, work_street, work_zipcode 로 하고 싶다면 어떻게 해야할까요
    그럴땐
    @AttributeOverrides, @AttributeOverride 를 사용해주면 됩니다

    public class Member {
        @Id @GeneratedValue
        private Long id;

        private String name;

        @Embedded
        @AttributeOverrides({
            @AttributeOverride(name = "city", column = @Column(name = "home_city"))
            @AttributeOverride(name = "street", column = @Column(name = "home_street"))
            @AttributeOverride(name = "zipcode", column = @Column(name = "home_zipcode"))
        })
        private Address address;

        @AttributeOverrides({
            @AttributeOverride(name = "city", column = @Column(name = "work_city"))
            @AttributeOverride(name = "street", column = @Column(name = "work_street"))
            @AttributeOverride(name = "zipcode", column = @Column(name = "work_zipcode"))
        })
        private Address address;
    }

    이런식으로 해주면 됨

    정리하자면 임베디드 값 타입은 객체지향적인 설계와 개발에 도움이 된다
    실무에서 자주 사용하니까 제대로 알아둡시다

=== 3. 값 타입과 불변 객체 ===

    값 타입은 복잡한 객체 세상을 조금이라도 단순화하려고 만든 개념
    단순하고 안전하게 다룰 수 있어야한다

    단순하고 안전하게 다룬다는 것은 값을
    참조를 통해 즉, 메모리에 접근해서 값을 가져오거나 세팅하는 게 아니라
    이미 저장된 값을 매번 다른 메모리로 복사해서 사용하도록 해야한다는 것입니다

    임베디드 타입은 클래스로 만들었기 떄문에 객체로 만들어질 수 밖에 없죠
    그럼 공유 참조를 피할 수 없을텐데 어떻게 해결해야할까요
    결론부터 말하자면 불변 객체로 만드는 것입니다
    다시 말해 처음에 값을 설정하면 이후에 값을 변경할 수 없는 객체로 만들라는 것임
    구체적으로
    생성자를 통해서만 값을 설정할 수 있도록 만들고
    setter 를 열어두지 않는 것이 그 방법입니다

    Integer 나 String 은 Java 에서 제공하는 대표적인 불변 객체라는 것도 알아둡시다

