섹션 11. 객체지향 쿼리 언어 - (2) 중급 문법

=== 1. 경로 표현식 ===

    경로 표현식이 뭐냐면
    객체 그래프를 탐색하는 것입니다

    근데 객체 그래프?
    이건 또 뭘까요
    일단 그래프가 무엇인지 이해할 필요가 있습니다

    수학에서 함수의 그래프와
    그래프 이론에서 말하는 그래프는
    무슨 차이가 있을까요

    우선 그래프는 점들의 집합이라고 정의할 수 있습니다
    근데 점이 2개 이상 모이면 점과 점 사이에 관계가 생기죠?
    여기서 점과 점들 사이의 관계에 어떤 의미가 있는건지
    다가가는 관점에서 차이가 생깁니다

    함수의 그래프는 점들 사이의 관계 그 자체에 집중합니다
    그리고 이 관계에는 무슨 규칙이 있는지 파악하려고 하죠
    그래서 이 관계를 함수식으로 풀어냅니다

    그래프 이론은 점들 사이의 관계를 파고들기보단
    관계가 형성된 모습을 보고 패턴을 분석하려고 합니다

    쉽게 말해서 함수의 그래프는 미시적으로 접근하고
    그래프 이론은 거시적으로 접근하는 거라고 생각하면 될듯요
    그래서 vertex 가 점에 해당하고 edge 가 관계에 해당한다 생각하면 됩니다

    그럼 이제 객체 그래프 탐색을 다시 보겠습니다
    쉽게 말해서
    객체가 2개 이상 있으면 둘 사이에 관계가 있을 수 도 있고 없을 수 도 있겠죠
    그 모습 자체를 그래프라고 하는것임

    그럼 이제 본론으로 돌아와서 경로 표현식을 정리해봅시다
    용어부터 봅시다
        상태 필드: 단순히 값을 저장하는 필드
        연관 필드: 연관 관계를 갖고 있는 필드
            단일 값 연관 필드: @ManyToOne, @OneToOne
            컬렉션 값 연관 필드: @OneToMany, @ManyToMany

    근데 결론부터 말하자면
    연관 필드를 객체 그래프 탐색해버리면 묵시적 조인이 발생하는데
    이건 실무에서 사용하면 안됩니다
    inner join 을 하지도 않았는데 자기 혼자 쿼리를 작성해버리기 때문에
    튜닝할 수 가 없고 추적하기도 힘듦

    예시)
    상태 필드 경로 탐색
    JPQL: select m.username, m.age from Member m
    SQL: select m.username, m.age from Member m

    단일 값 연관 경로 탐색
    JPQL: select o.member from Order o
    SQL: select m.*
         from Orders o
         inner join Member m on o.member_id = m.id

    이런식으로 자기 혼자 내부 조인해버림
    그래서 이걸 방지하기 위해선 명시적 조인을 해주는게 좋습니다

    select m from Order o join o.member m
    이런식으로 하면 됨

    정리하자면 연관 관계 필드를 객체 그래프 탐색할거면 명시적 조인으로 처리해야된다

