섹션 11. 객체지향 쿼리 언어 - (2) 중급 문법

=== 1. 경로 표현식 ===

    경로 표현식이 뭐냐면
    객체 그래프를 탐색하는 것입니다

    근데 객체 그래프?
    이건 또 뭘까요
    일단 그래프가 무엇인지 이해할 필요가 있습니다

    수학에서 함수의 그래프와
    그래프 이론에서 말하는 그래프는
    무슨 차이가 있을까요

    우선 그래프는 점들의 집합이라고 정의할 수 있습니다
    근데 점이 2개 이상 모이면 점과 점 사이에 관계가 생기죠?
    여기서 점과 점들 사이의 관계에 어떤 의미가 있는건지
    다가가는 관점에서 차이가 생깁니다

    함수의 그래프는 점들 사이의 관계 그 자체에 집중합니다
    그리고 이 관계에는 무슨 규칙이 있는지 파악하려고 하죠
    그래서 이 관계를 함수식으로 풀어냅니다

    그래프 이론은 점들 사이의 관계를 파고들기보단
    관계가 형성된 모습을 보고 패턴을 분석하려고 합니다

    쉽게 말해서 함수의 그래프는 미시적으로 접근하고
    그래프 이론은 거시적으로 접근하는 거라고 생각하면 될듯요
    그래서 vertex 가 점에 해당하고 edge 가 관계에 해당한다 생각하면 됩니다

    그럼 이제 객체 그래프 탐색을 다시 보겠습니다
    쉽게 말해서
    객체가 2개 이상 있으면 둘 사이에 관계가 있을 수 도 있고 없을 수 도 있겠죠
    그 모습 자체를 그래프라고 하는것임

    그럼 이제 본론으로 돌아와서 경로 표현식을 정리해봅시다
    용어부터 봅시다
        상태 필드: 단순히 값을 저장하는 필드
        연관 필드: 연관 관계를 갖고 있는 필드
            단일 값 연관 필드: @ManyToOne, @OneToOne
            컬렉션 값 연관 필드: @OneToMany, @ManyToMany

    근데 결론부터 말하자면
    연관 필드를 객체 그래프 탐색해버리면 묵시적 조인이 발생하는데
    이건 실무에서 사용하면 안됩니다
    inner join 을 하지도 않았는데 자기 혼자 쿼리를 작성해버리기 때문에
    튜닝할 수 가 없고 추적하기도 힘듦

    예시)
    상태 필드 경로 탐색
    JPQL: select m.username, m.age from Member m
    SQL: select m.username, m.age from Member m

    단일 값 연관 경로 탐색
    JPQL: select o.member from Order o
    SQL: select m.*
         from Orders o
         inner join Member m on o.member_id = m.id

    이런식으로 자기 혼자 내부 조인해버림
    그래서 이걸 방지하기 위해선 명시적 조인을 해주는게 좋습니다

    select m from Order o join o.member m
    이런식으로 하면 됨

    정리하자면 연관 관계 필드를 객체 그래프 탐색할거면 명시적 조인으로 처리해야된다

=== 2. 페치 조인 (fetch join) ===

    페치 조인은 실무에서 정말 많이 사용됩니다
    JPQL 의 성능 최적화를 위해 필수임

    명령어는 fetch join 으로 작성하면 됨
    N + 1 문제를 해결하기 위해 사용됩니다
    N + 1 문제는 지연 로딩으로 인해
    엔티티 프록시 객체가 우선 생성됐다가
    실제로 정보를 필요로 할 때
    쿼리를 날리는 것 때문에 발생하죠

    근데 이걸 내가 지금 쿼리 날릴때는 한 번에 처리하고 싶은 거임
    그래서 쿼리를 굳이 여러번 날릴 필요없이 한 번에 조회해서 성능 최적화를 하는겁니다

    예시)
    JPQL: select m from Member m join fetch m.team
    SQL: select m.*, t.*
         from member m
         inner join team t
         on m.team_id = t.id

    이렇게 한 번에 조회해오는 것임

    근데 한계가 있습니다
    페이징 처리할 때는 페치 조인하면
    카타시안 곱 때문에
    데이터가 뻥튀기돼서 사용하면 안됨

    데이터 중복을 제거할 땐 distinct 를 붙여주면 되는데
    select distinct m
    이런식으로 사용하면 됨

    그리고 페치 조인으로 해결안되는 것들은
    DTO 를 따로 만든 다음 필요한 데이터만 반환하도록 하는 게 낫습니다

=== 3. 다형성 쿼리 ===

    싱글 테이블 전략을 사용해서
    다형성 쿼리를 작성해야한다고 합시다

    구체적으로
    Item 부모 추상 클래스를 만들고
    Book, Movie 같은걸 자식 클래스로 만들었다고 가정함

    만약 조회대상을 Book, Movie 로 한정짓고 싶다면 어떻게 하면 될까요
    type() 을 사용하면 됩니다

    select i from Item i
    where type(i) in (Book, Movie)

    이렇게 작성해주면 됨

    그리고 만약 부모 타입을 자식 타입으로 다운 캐스팅하고 싶다면?
    treat() 를 사용하면 됩니다

    select i from Item i
    where treat(i as Book).author = 'kim'

    이런식으로 하면 됨

=== 4. 엔티티 직접 사용 ===

    JPQL 에서 엔티티를 직접 사용할 때
    SQL 은 어떻게 바꿔줄까요

    결론부터 말하자면 엔티티의 기본 식별자를 가지고 쿼리를 작성해줍니다

    예시)
    JPQL: select count(m) from Member m
    SQL: select count(m.id) as cnt from Member m

    이렇게 바꿔줍니다

=== 5. Named 쿼리 ===

    Named 쿼리가 뭐냐면
    미리 JPQL 을 작성해두고 이름 붙여서 반복해서 사용하는것입니다
    장점으로는 애플리케이션 로딩 시점에 초기화해주기 떄문에 반복 사용하는 경우 성능 최적화에 좋겠죠
    근데 한계가 있음
    엔티티 클래스 객체당 하나밖에 못만듭니다

    예시)
    @Entity
    @NamedQuery(
        name = "Member.findByUsername"
        query = "select m from Member m where m.username = :username"
    )
    public class Member {

    }

    그리고 사용하는 곳에서 파라미터 바인딩 해주면 됩니다
    XML 에도 작성할 수 있는데 이건 생략하고

    이 Named 쿼리를 Spring Data JPA 에서
    Repository 인터페이스에 @Query() 로 작성할 때 사용한다는 걸 알아두면 됨

=== 6. 벌크 연산 ===

    벌크 연산이 뭐냐면
    보통 JPQL 에서 사용하는 select 가 아니라
    update 나 delete 같은 쿼리를 말합니다

    변경 감지를 통해 데이터베이스에 데이터를 수정할 수 있긴 하지만
    쿼리를 굉장히 많이 날려야해서 성능에 좋지 않습니다
    예를 들어, 변경된 데이터가 100건이면 100번의 쿼리를 날려야하는 식임

    이럴때 벌크 연산을 사용해주면 됩니다
    근데 주의해야할 게 있음
    그게 뭐냐면
    select 같은 일반적이 조회는 영속성 컨텍스트를 거쳐서 DB 에 쿼리를 날리지만
    벌크 연산은 직접 DB 에 쿼리를 날리기 때문에
    1차 캐시에 데이터가 즉시 반영이 안됩니다

    그래서 벌크 연산을 할 경우엔
    영속성 컨텍스트를 따로 초기화 해줘야함

    예시)
    int resultCount = em.createQuery("update Product p set p.price = p.price * 1.1 where p.stockAmount < :stockAmount")
                            .setParameter("stockAmount", 10)
                            .executeUpdate();
    em.clear()
    em.find(~)

    이런식으로 하라는 것임