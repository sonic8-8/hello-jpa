섹션 11. 객체지향 쿼리 언어 - (1) 기본 문법

=== 1. 객체지향 쿼리 언어 소개 ===

    JPA 는 여러 쿼리 방식을 지원합니다
    JPQL
    JPA Criteria
    QueryDSL
    네이티브 SQL
    JDBC API
    JDBC Template
    MyBatis

    실무에서 Spring Data JPA 와 QueryDSL 을 사용하기 위해선
    JPQL 을 제대로 공부해놔야합니다

    JPQL 은 엔티티 객체를 대상으로 쿼리를 작성하는 것이고
    SQL 은 데이터베이스 테이블을 대상으로 쿼리를 작성하는 것입니다


=== 2. 기본 문법과 쿼리 API ===

    1. 기본 문법 에시

    select m from Member m where m.age > 18

    2. 오퍼레이션: 데이터베이스에서 처리하는 작업이나 기능

    CRUD operation: Create, Read, Update, Delete
    트랜잭션 operation: commit, rollback, savepoint
    조인 operation: inner join, left join 등
    집계 operation: sum, avg, count, max, min
    색인 operation: index 를 생성하거나 관리
    제약조건 operation: PK, FK, CHECK 등 설정

    3. TypedQuery, Query

    반환 타입이 명확할 때
    TypedQuery<Member> query = em.createQuery("select m from Member m", Member.class)

    반환 타입이 명확하지 않을때
    Query query = em.createQuery("select m.username, m.age from Member m")

    실무에선 불필요한 캐스팅을 방지하기 위해 TypedQuery<> 를 사용하는게 좋습니다

    4. 결과 조회 API

    query.getResultList(): 결과가 하나 이상일 때 사용하면 됩니다

    query.getSingleResult(): 결과가 정확히 하나일때 사용하면 되는데
                             결과가 없거나 둘 이상이면 예외가 발생합니다 정확히 하나여야할때 사용해야겠죠

    5. 파라미터 바인딩

    TypedQuery<Member> query = em.createQuery(select m from Member m where m.username = :username)
                        .setParameter("username", username);


    순서로 바인딩 되긴 하는데 명확하게 String 으로 바인딩하는게 안전하겠죠


=== 3. 프로젝션 ===

    프로젝션에 대해 알아봅시다
    이게 뭐냐면 select 절에 조회할 대상을 지정하는 것입니다

    예시)
    select m from Member m
    여기서 프로젝션은 m 이구요

    select m.team from Member m
    여기서 프로젝션은 m.team 입니다

    프로젝션은 3가지 방식이 있는데요
    1. Query 타입으로 조회
    2. Object[] 타입으로 조회
    3. new 명령어로 조회

    예시를 봅시다.
    1.
    TypedQuery<Member> query = em.createQuery("select m from Member m where m.username = :username", Member.class);
    List<Member> results = query.setParameter("username", "유저네임")
        .getResultList();

    for (Member result : results) {
        String name = result.getName();
        int price = result.getPrice();
    }

    이런식으로 리스트로 받아와서 객체로 사용할 수 있음

    2.
    두 번째 예시
    Object[]로 조회하기

    TypedQuery<Member> query = em.createQuery("select m from Member m where m.username = :username", Object[].class);
    List<Member> results = query.setParameter("username", "유저네임")
        .getResultList();

    for (Object[] result : results) {
        String name = (String) result[0];
        int price = (int) result[1];
    }

    Object[]로 조회하면 실무에서 사용하기 힘든 단점이 있습니다
    타입 캐스팅을 해줘야하고 모든걸 Object 로 받아오기 때문에 가독성이 떨어진다는점입니다

    3.
    세 번째 예시
    DTO 로 조회하면 원하는 값을 세팅한대로 깔끔하게 받아올 수 있습니다
    실무에서 사용한다면 이 방식이 좋음
    TypedQuery<Member> query = em.createQuery("select new jpabook.hellojpa.MemberDTO from Member m where m.username = :username", MemberDTO.class);
    List<Member> results = query.setParameter("username", "유저네임")
        .getResultList();

    for (Member result : results) {
        String name = result.getName();
        int price = result.getPrice();
    }

    다만 패키지부터 경로를 다 작성해줘야한다는게 약간 불편합니다
    실무에선 Spring Data JPA 를 사용하기 때문에 괜찮음


=== 4. 페이징 API ===

    JPA 는 페이징을 매우 간단히 해결해줍니다
    바로 예시를 봅시다

    List<Member> results = em.createQuery("select m from Member m order by m.name desc", Member.class)
        .setFirstResult(10)
        .setMaxResults(20)
        .getResultList();

    setFirstResult(int startPosition): 조회 시작 위치
    setMaxResults(int maxResult): 조회할 데이터 수

    데이터베이스 방언을 고려하지 않아도 JPA 가 페이징을 알아서 처리해줍니다

=== 5. 조인 ===

    1. 내부 조인
    연관 관계가 있어야함
        예시)
        select m from Member m (inner) join m.team t

    2. 외부 조인
    연관 관계가 있어야함
    left outer join 이라면 from 절 뒤에 나오는 엔티티를 기준으로 함
        예시)
        select m from Member m left (outer) join m.team t

    3. 세타 조인
    연관 관계가 없어도 가능
    두 테이블을 카타시안 곱으로 모든 경우의 수를 만든 후
    특정 조건에 맞는 것만 필터링하는 것으로
    특정 필드가 동일할 경우에 사용
        예시)
        select m, t from Member m, Team t where m.username = t.name

    4. on 절
    조인 대상을 필터링하거나
    연관관계 없는 엔티티를 외부 조인할 때 사용합니다
        예시)
        select m from Member m left (outer) join m.team t on t.name = '하이'

=== 6. 서브 쿼리 ===

    서브 쿼리를 사용하는 이유가 뭘까요
    결론부터 말하자면
    의미 있는 데이터를 조회하기 위한 전처리 과정이라고 생각하면 됩니다
    먼저 데이터를 가공하거나 추출해서 메인 쿼리에서 사용할 수 있도록 하는 것임
    그리고 이 데이터를 가지고 메인 쿼리에서 where 절을 통해 추가로 필터링 할 수 있겠죠

    JPA 3.0까지는 서브 쿼리를 where 이랑 Having 절에서만 사용할 수 있었습니다
    하지만 이제 3.1부터는 from 절에서도 사용할 수 있게됨
    방법은 join lateral 을 사용하는 것입니다

    예시)
    나이가 평균보다 많은 회원
    select m from Member m where m.age > (select avg(m2.age) from Member m2)

    한 건이라도 주문한 고객
    select m from Member m where (select count(o) from Order o where m = o.member) > 0

    join lateral 예시
    select m from Member m join lateral (select t from m.team t where t.name = m.username)

    서브쿼리 연산자
    exists: 서브 쿼리에 결과가 존재하면 참
    all: 모두 만족하면 참
    any, some: 하나라도 만족하면 참
    in: 서브 쿼리 결과 중 하나라도 같은 게 있으면 참

    예시)
    select m from Member m where exists (select t from m.team t where t.name = '팀A')
    select o from Order o where o.orderAmount > all (select p.stockAmount from Product p)
    select m from Member m where m.team = any (select t from Team t)

=== 7. JPQL 타입 표현과 기타식 ===

    문자는 '' 로 감싸서 표현합니다
    만약 She's 를 표현하고 싶다면
    'She"s' 처럼 작성하면 됨

    숫자는 10L(Long), 10D(Double), 10F(Float) 처럼 작성하면 됩니다

    Boolean 은 TRUE, FALSE 로 작성

    Enum 은 패키지 경로를 작성해줘야한다고 했었죠
    jpabook.hellojpa.domain.Member 이런식으로 하면 되구요

    마지막으로 엔티티 타입과 상속 관계를 정리해보면
    엔티티 타입은 엔티티 클래스를 의미합니다

    예시) @Entity 를 붙인 클래스
    @Entity
    public class Member {

    }

    이런게 엔티티 타입이고
    만약 싱글 테이블 전략을 사용한다면 추상 클래스를 만들고 그 구현체를 만들죠
    DB 에서는 하나의 테이블이지만 JPA 로 개발할 땐 엔티티 타입이기 때문에
    예를 들어
    m 이 싱글 테이블을 조회해오는데 이때 인스턴스가 Member 인 것만 조회하고 싶다면
    type() 함수를 사용할 수 있습니다
    where type(m) = Member 이런식으로요
    뭐 Admin 인것만 조회해오고 싶다면 이렇게 작성하면 됨
    where type(m) = Admin

    나머지는 sql 과 문법이 같습니다 한 번 정리만
    exists, in
    and, or, not
    =, >, <
    between, like, is null

=== 8. 조건식(case 등) ===

    case 식은 if 문과 비슷하게 사용할 수 있음

    예시)
    select
        case when m.age <= 10 then '학생요금'
             when m.age >= 10 then '경로요금'
             else '일반요금'
        end
    from Member m

    select
        case t.name
            when '팀A' then '인센티브110%'
            when '팀B' then '인센티브120%'
            else '인센티브105%'
        end
    from Team t

    coalesce(a, b): null 이 아닌 첫 번째 값을 반환
        coalesce 는 합쳐지다라는 의미를 갖고있는데
        숫자를 더하다 뭐 이런 의미가 아니라
        여러 값들이 대표 값 하나로 수렴해서 뭉쳐지다 합쳐지다 이런 느낌임
    nullif(a, b): 두 값이 같으면 null 반환하고 다르면 a 반환

    예시)
    select coalesce(m.username, '이름 없는 회원') from Member m
    select nullif(m.username, '관리자') from Member m


=== 9. JPQL 기본 함수 ===

    concat(m.firstname, ' ', m.lastname): 공백 포함해서 합쳐서 반환해줌
    substring(m.username, 1, 3): 이름 앞 3자리 추출
    trim(m.username): 공백 제거하고 반환해줌
    lower, upper
    length
    locate
    abs, sqrt, mod: 절댓값, 제곱근, 나머지 연산
    size, index

    사용자 정의 함수
    기본 함수만으로 해결이 안될 경우
    하이버네이트의 Dialect 를 확장해서 함수 등록을 할 수 있음