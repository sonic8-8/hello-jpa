섹션 8. 고급 매핑

=== 1. 상속관계 매핑 ===

    1. 조인 전략
    2. 단일 테이블
    3. 구현 클래스마다 테이블

    DB의 슈퍼타입 서브타입
    객체의 상속관계
    위 둘을 어떻게 매핑할건지 고민하고 만든 전략임

    총 3개의 상속관계 매핑 전략이 있는데
    각각 어떤 상황에서 사용할지 정리해봅시다

    먼저 비즈니스적으로 복잡할 경우는 조인 전략을 사용하시면 됩니다
    이게 뭐냐면
    예를 들어, Item 객체에 Album, Movie, Book 이 상속 관계라고 하면
    테이블도 마찬가지로 item 테이블을 만들고 album, movie, book 테이블을 추가한 다음 조인해두는 것임
    여기서 FK는 album, movie, book 테이블의 id를 PK 이면서 FK 로 동시에 설정해두는 형태입니다
    그리고 조회할 때 조인으로 가져오는 방식임
    여기서 DTYPE 을 만들어두는 게 운영할 때 편리한데 DTYPE은 뒤에서 말씀 드림

    두번째로 단일 테이블 전략입니다
    이게 뭐냐면
    item 테이블 하나만 만들어서 다 몰아넣는 것임.
    album, movie, book 이런 테이블 따로 안만들고 다 때려넣는 거구요
    그럼 테이블에 있던 필드도 item 테이블에 몰아넣어야 겠죠
    근데 이러면 어떤 테이블에 있던 필드인지 이런거 구분이 안되겠죠
    이런건 DTYPE 이라는 컬럼으로 구분해주면 됨
    album 이면 DTYPE 을 album 이라고 설정해두는 식입니다
    참고로 이 방식은 조회할 때 조인을 안하니까 조금 더 빠르겠죠 성능에 유리하구요

    마지막으로 구현 클래스마다 테이블을 만드는 전략입니다
    item 테이블이 없고
    album, movie, book 테이블을 각각 따로 만들어 둔 다음
    조인시키면 안됩니다.
    그냥 개별 테이블로 만들어야됨
    이러면 item 의 공통 필드들이 album, movie, book 테이블에 반복되겠죠
    예상대로 정규화가 제대로 안됐다고 DBA 한테 갈궈지구요
    운영할때도 insert 할 땐 괜찮지만 조회할 때
    만약 부모 타입인 item 으로 조회를 한다?
    그럼 item 테이블을 만들어두지 않았기 때문에
    모든 테이블을 union all 로 합친 다음 뒤져봐야하기 때문에
    쿼리를 엄청 많이 날려야합니다
    그리고 item 객체에 공통 필드를 1개 추가했다?
    이러면 상속 관계 테이블 개수대로 수정해줘야할 것이 생깁니다.
    그럼 이 전략을 언제 사용하면 될까요
    성향이 마조히스트라면 추천드리구요
    정신적으로 육체적으로 모두 힘들고 싶다면 도전해봅시다

    그래서 결론은
    조인 전략을 기본으로 가져가고
    프로젝트가 단순할 경우엔 단일 테이블 전략을 사용하시면 됩니다
    위 둘은
    성능이냐 좋은 설계냐 하는 트레이드 오프가 있기 때문에 상황에 따라 선택하시면 됩니다

