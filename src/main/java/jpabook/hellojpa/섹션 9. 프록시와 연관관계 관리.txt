섹션 9. 프록시와 연관관계 관리

=== 1. 프록시 ===

    다음과 같은 상황을 먼저 생각해봅시다
    Member 와 Team 객체가 서로 연관관계를 맺고 있습니다
    A 로직에서는 회원과 팀을 항상 함께 출력해야하고
    B 로직에서는 회원만 출력한다고 합시다

    A 로직에서는 A 로직에 맞게 멤버와 팀을 항상 함께 조회하도록 하면 좋겠죠
    근데 B 로직에도 이 방식을 그대로 적용하면 굳이 필요없는 팀까지 조회하니까 낭비인듯요

    이런 문제를 JPA 에서는 지연 로딩과 프록시로 해결합니다
    근데 지연 로딩을 제대로 이해하려면 프록시부터 제대로 알아야 함

    그럼 이제부터 뭔지 알아봅시다

    먼저 getReference() 메서드부터 보겠습니다
    이걸로 프록시가 뭔지 알 수 있음

    em.find(): 데이터베이스를 통해 실제 엔티티 객체 조회
    em.getReference(): 데이터베이스 조회를 미루는 프록시 엔티티 객체 조회
    여기서 데이터베이스 조회 시점을 미룬다고 했는데
    뭐 어떻게 미룬다는 걸까요

    find()는 메서드 호출 시점에 데이터베이스에 쿼리를 날리지만
    getReference()는 프록시 객체를 만들어두고 실제로 값을 조회해야하는 시점에 데이터베이스에 접근합니다

    프록시 객체가 어떻게 만들어지냐구요
    우선 실제 엔티티를 상속받아서 만들어지고 값은 따로 넣어두지 않습니다
    그러다가 실제로 데이터베이스를 호출할 일이 생기면 그때 초기화를 시키는 것임
    구체적으로는 영속성 컨텍스트의 1차 캐시에 값이 있는지 확인한 다음 없으면
    DB 에서 테이블 조회해서 엔티티를 생성합니다
    그리고 이 실제로 생성된 엔티티를 참조 값으로 설정하는 것임
    프록시 객체에서 실제 엔티티에 대한 참조값은 target 이라고 저장해두고
    메서드를 사용할 때마다 실제 엔티티를 호출합니다

    그리고 프록시 객체는 같은 타입인지 확인 할 때
    == 이 아닌
    instanceOf 를 사용해야 합니다
    왜냐하면
    == 은 객체의 메모리 주소 그 자체를 비교하기 때문에
    같은 값을 갖고 있더라도 메모리 주소가 다르면 false 가 나옵니다.
    이 말은 상속받은 객체인 프록시 객체는 부모 객체와 메모리 주소가 다르기 때문에 false 가 나오겠죠
    하지만 instanceOf 는 상속 관계를 고려하기 때문에 부모 클래스를 상속 받은 경우 같은 타입으로 판단하고 true 가 나옵니다
    그렇기 때문에 JPA 에서는 타입이 같은지 확인할 때 instanceOf 로 해야합니다

    JPA 에서는 같은 값을 가진 객체를 조회하고 만들어진 객체 2개를 == 비교했을 때 항상 true 가 나와야합니다
    그래서 같은 이름을 가진 Member 객체를
    하나는 getReference() 로 객체를 가져오고
    나머지 하나는 find()로 객체를 가져오더라도
    둘을 비교했을 때 true 가 나옵니다

    근데 getReference()는 프록시 엔티티 객체고 find()는 실제 엔티티 객체인데 이게 어떻게 가능하냐구요
    위 대전제를 지키는 방식으로 동작합니다
    예를 들어, 먼저 getReference()로 이름이 A인 Member 객체 a 를 가져왔다면 이건 프록시 객체죠
    그리고 find()로 이름이 A인 Member 객체 b 를 가져오면 여기선 == 이 true 가 나와야하니까 프록시 객체를 가져옴

    반대로 find()로 먼저 실제 엔티티 객체를 가져온 다음
    getReference()로 객체를 가져와도 실제 엔티티 객체를 가져옴

    마지막으로 준영속 상태가 됐을 경우에 프록시 객체를 초기화 하면
    당연히 영속성 컨텍스트의 도움을 못받기 때문에 DB 조회가 안돼서 예외가 발생합니다
    세션 연결이 안되니까 그렇겠죠

    결론은 프록시 엔티티 객체는 타입 비교할 때 instanceOf 로 해야한다
    JPA 에서는 같은 영속성 컨텍스트 안에 있을 때 같은 값을 가진 엔티티를 가져온 다음
    == 비교하면 항상 true 를 반환해야한다
    이 정도 기억하고 지연 로딩으로 넘어갑시다

=== 2. 즉시 로딩과 지연 로딩 ===

    지연 로딩은 fetch 전략 중 하나인데
    지연 로딩 설정을 해주면 객체에 프록시 엔티티 객체를 넣어둬서
    실제로 값을 조회할 때
    즉, 실제로 사용될 때
    DB 에 쿼리를 날립니다

    @ManyToOne 이나 @OneToOne 은 기본 fetch 전략이 EAGER 로 설정돼있는데
    이러면 즉시 로딩되기 때문에 의존관계가 설정 된 모든 객체를 가져옵니다
    그래서 실무에서는 즉시 로딩을 사용하면 큰일나구요
    예를 들어 연관 관계가 10개만 있더라도
    1번 쿼리 날릴걸 최소 11번을 날리기 때문임

    그래서 실무에선 무조건 모든 연관 관계를 지연 로딩을 해두고
    만약 즉시 로딩을 사용해야한다면 fetch 조인이나 엔티티 그래프 기능을 사용하면 됨
    이론적으로는 즉시 로딩을 사용해도 되는거 아닌가? 싶지만
    절대 아니구요 즉시 로딩을 사용해야할 것 같은 경우엔
    위에서 말한 것처럼 fetch 조인으로 대부분 해결하면 됩니다
    결론은 실무에서 즉시 로딩은 절대 사용하지말자

=== 3. 영속성 전이(CASCADE)와 고아 객체 ===

    설명에 앞서 영속성 전이와 고아 객체는
    영속성 전이와 고아 객체는 프록시, 지연 로딩, 즉시 로딩
    이런 것들과 관련이 없다는 걸 인지하고 넘어갑시다

    말그대로 부모 엔티티를 저장할 때 자식 엔티티도 같이 저장하는 식으로 사용하면 됨

    먼저 영속성 전이가 뭐냐면
    부모 엔티티를 영속화 할 때 자식 엔티티도 함께 영속화 하는 것을 말합니다
    이해가 안되면 저장이라고 생각하면 쉬움
    영속성 전이를 사용하려면
    @OneToMany 나 @OneToOne 에
    속성으로 cascade = CascadeType.ALL 이나 CascadeType.PERSIST 둘 중 하나를 설정해주면 됩니다
    이때 선택 기준은
    삭제가 함께 되는 게 부담스러운가 입니다
    함께 저장되는 것만 하고 싶다면 PERSIST 를 그게 아니라면 ALL 을 사용하면 됩니다

    그럼 연관 관계 상관없이 아무데나 사용할 수 있냐하면 아니구요
    연관 관계가 하나일 경우에만
    즉, 부모와 자식 관계 하나일 때만 사용해야합니다
    (부모와 자식의 라이프 사이클이 같을 때 사용하면 됨)

    두번 째로
    고아 객체에 대해 살펴봅시다
    고아 객체가 뭐냐면 말그대로 고아입니다
    부모가 없는 거구요

    구체적으로 부모가 자식을 제거하면 고아 객체가 되는데
    부모에서 자식의 리스트를 제거하는 거구요
    이러면 부모가 자식을 참조하지 않게 되기 때문에 JPA 가 자동으로 삭제해주는 것입니다
    @OneToMany 와 @OneToOne 에 orphanRemoval = true 로 설정하면 됨

    cascade 와 마찬가지로 부모-자식 연관관계가 하나 일 때만 사용해야합니다
    em.remove()로 부모가 자식 리스트를 삭제했을때 자동으로 삭제됨

    추가로 기억하면 좋을 것은
    cascade = CascadeType.ALL 과 orphanRemoval = true 를 동시에 설정해두면
    DDD 의 Aggregate Root 개념을 구현할 때 유용하다는 것입니다

    정리하자면
    영속성 전이와 고아 객체는 엔티티 사이의 연관 관계가 부모 자식 관계 하나만 있을때
    함께 저장이나 삭제 할 수 있게 해주는 기능이라고 기억하시면 됩니다
    @OneToMany 나 @OneToOne 가 붙은 엔티티가 부모 엔티티기 때문에 여기에 속성을 설정해두면 됨

